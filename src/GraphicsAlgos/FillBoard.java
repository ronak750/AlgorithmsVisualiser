/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GraphicsAlgos;

import searching.*;
import sorting.Main;
import java.awt.*;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import java.util.Queue;
import java.util.*;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JOptionPane;

/**
 *
 * @author Apar
 */
public class FillBoard extends javax.swing.JFrame  implements MouseMotionListener, MouseListener{

    /**
     * Creates new form TestForm
     */
    private int arraySize=50;
    private int[] array=new int[arraySize];
    private int x_min=50,y_min=50;
    private int x_window=1250,y_window=700;
    private int window=950;
    static Graphics graphics;
    int delay=40;
    
    // specific variables
    private int width=20;
    private final Color final_color=Color.YELLOW,
                        path_color=Color.ORANGE ;
    private final java.awt.Color initial_color=java.awt.Color.yellow,
                   source_color=java.awt.Color.decode("#EE82EE"),
                   background_color=java.awt.Color.decode("#d6d9e0"),
                   dest_color=Color.green,
                   temp_color=Color.decode("#A2B582"),
                   black_color=Color.BLACK;
//    private int sourceX=0,sourceY=0;
    private int destX=0,destY=0;
    private int max_x=window/width,max_y=y_window/width;
    private int board[][]=new int[max_x][max_x];
    private int visited[][]=new int[max_x][max_x];
    private int cost[][]=new int[max_x][max_x];
    private boolean isFound=false;
//    private boolean srcChange=false,destChange=false;
    private static int algoIndex=-1;
        
    //
    
    public FillBoard() {
        initComponents();  
        addMouseMotionListener(this);
//        this.addMouseMotionListener(this);
        addMouseListener(this);
        resetBoard();
//        sourceX=max_x/3;sourceY=max_y/2;
//        destX=2*max_x/3;destY=max_y/2;
    }
    
    public void paint(Graphics g)
    {

        
//        if(graphics==null);
//        else return;
        super.paint(g);
        graphics=g;

        for(int i=0;i<max_x;i++)
        {
            g.drawLine(i*width, 0,i*width , y_window);
            board[i][1]=1;
            board[i][max_y-1]=1;
        }
        for(int i=0;i<max_y;i++)
        {
            g.drawLine(0, i*width,window , i*width);
            board[0][i]=1;
            board[max_x-1][i]=1;
            fillCell(Color.black,max_x-1,i);
        }
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                if(board[i][j]==1)
                    fillCell(black_color, i, j);
                if(visited[i][j]==1)
                    fillCell(temp_color, i, j);
            }
        }
//        if(isFound) path(cost[destX][destY]);
//        fillCell(source_color,sourceX,sourceY);
//        fillCell(dest_color,destX,destY);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton9 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Algos");
        setMinimumSize(new java.awt.Dimension(1250, 700));

        jButton9.setBackground(new java.awt.Color(102, 153, 0));
        jButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 51, 51));
        jButton9.setText("HOME");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 102, 102));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Algorithm", "Dijikstra Algorithm", "A* Search Algorithm", "DFS Algorithm", "BFS Algorithm" }));

        jLabel6.setFont(new java.awt.Font("Lucida Calligraphy", 1, 26)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 255));
        jLabel6.setText("Controller");

        jButton5.setBackground(new java.awt.Color(102, 153, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 51, 51));
        jButton5.setText("RESET");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Drag mouse to create \nwalls and/or change source\nand destination");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jButton11.setBackground(new java.awt.Color(0, 153, 255));
        jButton11.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jButton11.setForeground(new java.awt.Color(255, 255, 255));
        jButton11.setText("Simulate");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(864, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(110, 110, 110))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(jButton11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(91, 91, 91)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    
   
    
    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        
        Main mn=new Main();
        this.dispose();
        mn.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    resetBoard();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        boolean fill=false;
        for(int i=5;i<max_x-5;i++)
        {
            fill=false;
            for(int j=5;j<max_y-5;j++)
            {               
                if(board[i][j]==1)
                {    
                    fill=!fill;
                    continue;           
                }
                if(fill)
                {
                    fillCell(source_color,i,j);
                }
            }
        }
        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    
    private void replay()
    {
//        for(int i=0;i<max_x;i++)
//        {
//            for(int j=0;j<max_y;j++)
//            {
//                if(visited[i][j]==1 && board[i][j]!=1)
//                    fillCell(background_color, i, j);
//                visited[i][j]=0;
//                cost[i][j]=Integer.MAX_VALUE;
//                
//            }
//        }       
//        for(int i=0;i<max_x;i++)
//        {
//            for(int j=0;j<max_y;j++)
//            {
//                
////                cost[i][j]=0;
//            }

    }
    
    private int findH(int x,int y)
    {
        return Math.abs(x-destX)+Math.abs(y-destY);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FillBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FillBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FillBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FillBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FillBoard().setVisible(true);
//                    new Grid().setVisible(true);
            }
        });
    }

    
  
     
    @Override
    public void mouseDragged(MouseEvent me) {

        int x=me.getX();
        int y=me.getY();
        x/=width; y/=width;
        if(x>=max_x || y>=max_y) return;
        Graphics g=getGraphics();
        
//        if(srcChange)
//        {
//            fillCell(background_color,sourceX,sourceY);
//            sourceX=x;sourceY=y;
//            fillCell(source_color, sourceX, sourceY);     
//            if(isFound){
//                jButton3.doClick();
//            }
//        }
//        else if(destChange)
//        {
//            fillCell(background_color,destX,destY);
//            destX=x;destY=y;
//            fillCell(dest_color, destX, destY);
//            if(isFound){
//                jButton3.doClick();
//            }
//        }
        
//            if(isDest(x,y) || isSource(x,y)) return;
            board[x][y]=1;
            g.fillRect(x*width, y*width, width, width);
        

    }

    @Override
    public void mouseMoved(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
    }

    private void fillCell(Color c,int x,int y)
    {
        Graphics g=getGraphics();
//       Graphics  g=graphics;

        g.setColor(c);
        g.fillRect(x*width+1, y*width+1, width-1, width-1);
    }
    
    public void resetBoard()
    {
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                visited[i][j]=0;
                board[i][j]=0;
                cost[i][j]=Integer.MAX_VALUE;
            }
        }
        isFound=false;
        repaint();
    }
    
    

    
    @Override
    public void mousePressed(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        int x=me.getX();
//        int y=me.getY();
//        x/=width; y/=width;
//        if(x>=max_x || y>=max_y) return;
//        if(x==sourceX && y==sourceY)        
//        {
//            srcChange=true;
//            destChange=false;
//        }     
//        else if(x==destX && y==destY)
//        {
//            destChange=true;
//            srcChange=false;
//        }
//        else {
//            srcChange=false;
//            destChange=false;
//        }
    }

    @Override
    public void mouseReleased(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
     
    class SortByF implements Comparator<Pair<Integer,Pair<Integer,Integer > > >
{

    @Override
    public int compare(Pair<Integer, Pair<Integer, Integer>> t, Pair<Integer, Pair<Integer, Integer>> t1) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if(t.getKey()==t1.getKey())
        {
            Pair p1=t.getValue();
            Pair p2=t1.getValue();
            int h1,h2;
            h1 = Math.abs((int)p1.getKey()-destX)+Math.abs(destY-(int)p1.getValue());
            h2 = Math.abs((int)p2.getKey()-destX)+Math.abs(destY-(int)p2.getValue());
            return h1-h2;
        }
        return t.getKey()-t1.getKey();
    }
    
}
}

