/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GraphicsAlgos;

import com.sun.prism.GraphicsPipeline;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Robot;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Apar
 */
public class ScanLineBoard extends javax.swing.JFrame implements MouseMotionListener, MouseListener{

    /**
     * Creates new form ScanLineBoard
     */
    
    private int x_min=50,y_min=50;
    private int x_window=1250,y_window=700;
    private int window=950;
    static Graphics graphics;
    int delay=40;
    
    // specific variables
    private int vertexCount=0;
    ArrayList<Vertex> verticesList=new ArrayList<Vertex>();
    Vertex prevVertex,curVertex;
    private int totalVerticesCount=4;
    private int max_x=1300,max_y=700;
    private final Color final_color=Color.YELLOW,
                        path_color=Color.ORANGE ;
    private final java.awt.Color initial_color=java.awt.Color.yellow,
                   source_color=java.awt.Color.decode("#EE82EE"),
                   background_color=java.awt.Color.decode("#d6d9e0"),
                   dest_color=Color.green,
                   temp_color=Color.decode("#A2B582"),
                   black_color=Color.BLACK;
//    private int sourceX=0,sourceY=0;
//    private int destX=0,destY=0;
////    private int max_x=window/width,max_y=y_window/width;
//    private int board[][]=new int[max_x][max_x];
//    private int visited[][]=new int[max_x][max_x];
//    private int cost[][]=new int[max_x][max_x];
//    private boolean isFound=false;
//    private boolean srcChange=false,destChange=false;
//    private static int algoIndex=-1;
        
    
    public ScanLineBoard() {
        initComponents();
        addMouseMotionListener(this);
//        this.addMouseMotionListener(this);
        addMouseListener(this);

    }
    
    public void paint(Graphics g)
    {
        super.paint(g);
        graphics=g;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Scan Line");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(1167, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(71, 71, 71))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(jButton1)
                .addContainerGap(496, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        graphics=getGraphics();
        boolean fill=false;
        
        try {
             Robot r= new Robot();
            
            
        
        for(int i=30;i<max_x;i++)
        {
            for(int j=30;j<max_y;j++)
            {
                // check condition for boundary 
               if(r.getPixelColor(50, 50).getGreen()==0)
               {
                    System.out.println(""+r.getPixelColor(50, 50));
               }
//                graphics.getColor();
//                if(fill)
//                {
//                    
//                }
            }
            
        }
        } catch (AWTException ex) {
            Logger.getLogger(ScanLineBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
//System.out.println("pixel"+getPixel(10,10));

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScanLineBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScanLineBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScanLineBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScanLineBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScanLineBoard().setVisible(true);
            }
        });
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//            if(vertexCount<2){
//                
//            }
//            else{
//                graphics=getGraphics();
//                graphics.setColor(Color.BLACK);
//                graphics.drawLine(prevVertex.getX(), prevVertex.getY(), me.getX(), me.getY());
//            }
    }

    @Override
    public void mouseClicked(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//        System.out.println("Clicked");
                graphics=getGraphics();
                int x=me.getX(),y=me.getY();
                x=me.getXOnScreen();
                y=me.getYOnScreen();
                if(x>=max_x || y>=max_y) return;
                Vertex v1=new Vertex(x,y);
                verticesList.add(v1);
                graphics.drawOval(x, y, 1, 1);
                if(vertexCount>0 && vertexCount<totalVerticesCount)
                {
                    graphics.drawLine(prevVertex.getX(), prevVertex.getY(), x, y);
                }
                else if(vertexCount>=totalVerticesCount){
                    JOptionPane.showMessageDialog(null, "Maximum Vertices Already Drawn");
                }
                vertexCount++;
                prevVertex=v1;
                if(vertexCount==totalVerticesCount)
                {
                    graphics.drawLine(prevVertex.getX(), prevVertex.getY(),
                            verticesList.get(0).getX(), verticesList.get(0).getY());
                }
                
            
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
