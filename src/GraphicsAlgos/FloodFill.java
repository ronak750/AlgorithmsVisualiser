/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GraphicsAlgos;

import com.sun.prism.GraphicsPipeline;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Robot;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Apar
 */
public class FloodFill extends javax.swing.JFrame implements MouseMotionListener, MouseListener{

    /**
     * Creates new form ScanLineBoard
     */
    private int x_min=50,y_min=50;
    private int x_window=1250,y_window=700;
    private int window=950;
    static Graphics graphics,gg;
    int delay=40;
    
    // specific variables
    
    private int max_x=1300,max_y=700;
    private int y_pol_max=Integer.MIN_VALUE,x_pol_max=Integer.MIN_VALUE;
    private int y_pol_min=Integer.MAX_VALUE,x_pol_min=Integer.MAX_VALUE;
    private final Color final_color=Color.YELLOW,
                        path_color=Color.ORANGE ,
                        boundary_color=Color.BLACK,
                        fill_color=Color.RED;
    private final java.awt.Color initial_color=java.awt.Color.yellow,
                   source_color=java.awt.Color.decode("#EE82EE"),
                   background_color=java.awt.Color.decode("#d6d9e0"),
                   dest_color=Color.green,
                   temp_color=Color.decode("#A2B582"),
                   black_color=Color.BLACK;
     
    int bc=boundary_color.getRGB(),fc=fill_color.getRGB();
    private boolean init=true;    
    
    
    // experimental variables
    BufferedImage img;
    private int prev_x,prev_y;
    private boolean first=true;
    
    public FloodFill() {
        initComponents();
        addMouseMotionListener(this);
//        this.addMouseMotionListener(this);
        addMouseListener(this);
        img=new BufferedImage(700, 700, BufferedImage.TYPE_INT_RGB);
        gg=img.getGraphics();
        
    }
    public void draw()
    {
        gg.setColor(Color.WHITE);
        gg.fillRect(0, 0, 700, 700);
        gg.setColor(Color.BLACK);
//        gg.drawOval(100, 100, 20, 20);
//        getGraphics().drawImage(img, 0, 00, this);
    }
    public void paint(Graphics g)
    {
        if(init)
        {
            draw();
            init=false;
        }
        super.paint(g);
        graphics=g;
        g.drawImage(img, 0, 0, this);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1337, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FloodFill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FloodFill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FloodFill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FloodFill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FloodFill().setVisible(true);
            }
        });
    }

    @Override
    public void mouseDragged(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        int x=me.getX(),y=me.getY();
        if(x>=max_x || y>=max_y) return;
        graphics=getGraphics();
        gg.setColor(Color.BLACK);
        if(!first)
        {
            gg.drawLine(x, y, prev_x, prev_y);
        }      
        first=false;
        gg.fillOval(x,y, 2, 2);
        prev_x=x;prev_y=y;
        graphics.drawImage(img, 0, 0, this);       
        
    }

    @Override
    public void mouseMoved(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseClicked(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//  
        int srcx=me.getX();
        int srcy=me.getY();
        
        // recursive function call for smaller figures.
        // for larger this sunction will give stack overflow error
//        boundaryFill4(srcx, srcy);
        
        //iterative function call for larger figures
        bfill(srcx, srcy);            
    }
    
   // ITERATIVE FUNCTION TO CALL BOUNDARY FILL 
   void bfill(int xi,int yi)
   {
       Stack<Vertex> points = new Stack<>();
        points.add(new Vertex(xi, yi));

        while(!points.isEmpty()) {
            Vertex currentPoint = points.pop();
            int x = currentPoint.getX();
            int y = currentPoint.getY();

            int current = getpixel(x, y);
        if((current != bc) && (current != fc)){
            //bI.setRGB(x, y, fColor.getRGB());
//            bI.setRGB(x, y, fColor.getRGB());
//
//            repaint();
            putpixel(x, y);
            points.push(new Vertex(x+1, y));
            points.push(new Vertex(x-1, y));
            points.push(new Vertex(x, y+1));
            points.push(new Vertex(x, y-1));
        }
    }
   }
    
// RECURSIVE BOUNDARY FILL ALGO
   // FOR LARGER FIGURES IT GIVES STACK OVERFLOW
void boundaryFill4(int x, int y)
{
    if(x<10 || y<10 || x>500 || y>500)  return;
    if(getpixel(x, y) != bc &&
       getpixel(x, y) != fc)
    {
        putpixel(x, y);
        boundaryFill4(x + 1, y);
        boundaryFill4(x, y + 1);
        boundaryFill4(x - 1, y);
        boundaryFill4(x, y - 1);
    }
}
    int getpixel(int x,int y)
    {
//        System.out.println(img.getRGB(x, y)+"--"+boundary_color.getRGB());
        return img.getRGB(x, y);
    }
    void putpixel(int x,int y)
    {
        img.setRGB(x, y, fc);
        getGraphics().drawImage(img, 0, 0, this);
    }

    @Override
    public void mousePressed(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
