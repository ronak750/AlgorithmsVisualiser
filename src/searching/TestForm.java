/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package searching;

import sorting.Main;
import java.awt.*;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.LinkedList;
import java.util.Queue;
import java.util.*;
import java.util.function.Consumer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.util.Pair;
import javax.swing.JOptionPane;

/**
 *
 * @author Apar
 */
public class TestForm extends javax.swing.JFrame  implements MouseMotionListener, MouseListener{

    /**
     * Creates new form TestForm
     */
    private int arraySize=50;
    private int[] array=new int[arraySize];
    private int x_min=50,y_min=50;
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private int x_window=(int) screenSize.getWidth()*90/100;
    private int y_window=(int) screenSize.getHeight()*90/100;
    private int window=x_window*80/100;
    static Graphics graphics;
    int delay=40;
    
    // specific variables
    private int width=25;
    private final Color final_color=Color.YELLOW,
                        path_color=Color.ORANGE ;
    private final java.awt.Color initial_color=java.awt.Color.yellow,
                   source_color=java.awt.Color.decode("#EE82EE"),
                   background_color=java.awt.Color.decode("#d6d9e0"),
                   dest_color=Color.green,
                   temp_color=Color.decode("#A2B582"),
                   black_color=Color.BLACK;
    private int sourceX=0,sourceY=0;
    private int destX=0,destY=0;
    private int max_x=window/width,max_y=y_window/width;
    private int board[][]=new int[max_x][max_x];
    private int visited[][]=new int[max_x][max_x];
    private int cost[][]=new int[max_x][max_x];
    private boolean isFound=false;
    private boolean srcChange=false,destChange=false;
    private static int algoIndex=-1;
        
    //
    
    public TestForm() {
        initComponents();  
        addMouseMotionListener(this);
        setSize(x_window,y_window);
//        this.addMouseMotionListener(this);
        addMouseListener(this);
        resetBoard();
        sourceX=max_x/3;sourceY=max_y/2;
        destX=2*max_x/3;destY=max_y/2;
    }
    
    public void paint(Graphics g)
    {

        
//        if(graphics==null);
//        else return;
        super.paint(g);
        graphics=g;

        for(int i=0;i<max_x;i++)
        {
            g.drawLine(i*width, 0,i*width , y_window);
            board[i][1]=1;
            board[i][max_y-1]=1;
        }
        for(int i=0;i<max_y;i++)
        {
            g.drawLine(0, i*width,window , i*width);
            board[0][i]=1;
            board[max_x-1][i]=1;
            fillCell(Color.black,max_x-1,i);
        }
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                if(board[i][j]==1)
                    fillCell(black_color, i, j);
                if(visited[i][j]==1)
                    fillCell(temp_color, i, j);
            }
        }
        if(isFound) path(cost[destX][destY]);
        fillCell(source_color,sourceX,sourceY);
        fillCell(dest_color,destX,destY);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton10 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Graph Algos");
        setMinimumSize(new java.awt.Dimension(1250, 700));

        jButton3.setText("Fast");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Maze");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.setVisible(false);

        jButton7.setText("Rnd");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jButton7.setVisible(false);

        jButton9.setBackground(new java.awt.Color(102, 153, 0));
        jButton9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 51, 51));
        jButton9.setText("HOME");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(0, 102, 102));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Algorithm", "Dijikstra Algorithm", "A* Search Algorithm", "DFS Algorithm", "BFS Algorithm" }));

        jButton10.setBackground(new java.awt.Color(0, 153, 255));
        jButton10.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jButton10.setForeground(new java.awt.Color(255, 255, 255));
        jButton10.setText("Simulate");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Lucida Calligraphy", 1, 26)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(51, 51, 255));
        jLabel6.setText("Controller");

        jButton5.setBackground(new java.awt.Color(102, 153, 0));
        jButton5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 51, 51));
        jButton5.setText("RESET");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setText("Drag mouse to create \nwalls and/or change source\nand destination");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(864, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jButton3)
                                        .addGap(37, 37, 37))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addGap(110, 110, 110))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton7))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(39, 39, 39)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton10)
                .addGap(47, 47, 47)
                .addComponent(jButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jButton9)
                .addGap(91, 91, 91)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jButton3.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dijisktra()
    {
                
        replay();
        Queue<Pair<Integer,Integer> > que;
        que=new LinkedList<Pair<Integer,Integer> >();
        
        //sample que implementation
        
//        Pair p1=new Pair(10,20);
//        Pair p2=new Pair(10,21);
//        que.add(p1);
//        que.add(p2);
//        System.out.println(""+que.peek());
//        que.remove();
//        System.out.println(""+que.peek());


        //actual code
        que.add(new Pair(sourceX,sourceY));
        cost[sourceX][sourceY]=0;
//        visited[sourceX][sourceY]=1;
        int prevCost=0;
        System.out.println(""+destX+" "+sourceX);
        while(!que.isEmpty())
        {
            int curX=que.peek().getKey();
            int curY=que.peek().getValue();
            que.remove();
            if(board[curX][curY]==1 || visited[curX][curY]==1) continue;
            visited[curX][curY]=1;
            int curCost=cost[curX][curY];     
            if(curX==sourceX && curY==sourceY);
            else fillCell(temp_color,curX,curY);
            if(curX==destX && curY==destY) {
                isFound=true;
                break;
            }
            if(board[curX][curY-1]!=1 && visited[curX][curY-1]!=1)
            {
                que.add(new Pair(curX,curY-1));
                cost[curX][curY-1]=curCost+1;
            }
            if(board[curX-1][curY]!=1 && visited[curX-1][curY]!=1)
            {
                que.add(new Pair(curX-1,curY));
                cost[curX-1][curY]=curCost+1;
            }
            if(board[curX+1][curY]!=1 && visited[curX+1][curY]!=1)
            {
                que.add(new Pair(curX+1,curY));
                cost[curX+1][curY]=curCost+1;
            }
            if(board[curX][curY+1]!=1 && visited[curX][curY+1]!=1)
            {
                que.add(new Pair(curX,curY+1)); 
                cost[curX][curY+1]=curCost+1;
            }
            
            
//            for(int i=curX-1;i<=curX+1;i++)
//            {
//                if(i<0)
//                    continue;
//                for(int j=curY-1;j<=curY+1;j++)
//                {
//                    if(j<0)  continue;
//                    que.add(new Pair(i,j));
            if(prevCost!=curCost)
            {
                try {
                Thread.sleep(delay*5);
            }  catch (InterruptedException ex) {
                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
            }
            }
            prevCost=curCost;

//                }
//            }
        }
        fillCell(source_color,sourceX,sourceY);
        if(isFound)
        {
            fillCell(final_color,destX,destY);
            path(cost[destX][destY]);
        }
        else{
            JOptionPane.showMessageDialog(null, "Destination couldn't be reached");
        }

    }

    private void dfs()
    {
        replay();
        LinkedList<Pair<Integer,Integer> > st=new LinkedList<Pair<Integer,Integer> >();
        
        //sample stack implementation
//        st.push(new Pair(21,30));
//        System.out.println(""+st.peek());
//        st.push(new Pair(22,30));
//        System.out.println(""+st.peek());
//        st.pop();
//        System.out.println(""+st.peek());
        
        // actual code
        st.push(new Pair(sourceX,sourceY));
        cost[sourceX][sourceY]=0;
//        visited[sourceX][sourceY]=1;
        while(!st.isEmpty())
        {
            int curX=st.peek().getKey();
            int curY=st.peek().getValue();
            st.pop();
            if(board[curX][curY]==1 || visited[curX][curY]==1) continue;
            visited[curX][curY]=1;
            int curCost=cost[curX][curY];     
            if(curX==sourceX && curY==sourceY);
            else fillCell(temp_color,curX,curY);
            if(curX==destX && curY==destY) {
                isFound=true;
                break;
            }
            if(board[curX][curY-1]!=1 && visited[curX][curY-1]!=1)
            {
                st.push(new Pair(curX,curY-1));
                cost[curX][curY-1]=curCost+1;
            }
            if(board[curX-1][curY]!=1 && visited[curX-1][curY]!=1)
            {
                st.push(new Pair(curX-1,curY));
                cost[curX-1][curY]=curCost+1;
            }
            if(board[curX+1][curY]!=1 && visited[curX+1][curY]!=1)
            {
                st.push(new Pair(curX+1,curY));
                cost[curX+1][curY]=curCost+1;
            }
            if(board[curX][curY+1]!=1 && visited[curX][curY+1]!=1)
            {
                st.push(new Pair(curX,curY+1)); 
                cost[curX][curY+1]=curCost+1;
            }
            
            
//            for(int i=curX-1;i<=curX+1;i++)
//            {
//                if(i<0)
//                    continue;
//                for(int j=curY-1;j<=curY+1;j++)
//                {
//                    if(j<0)  continue;
//                    que.add(new Pair(i,j));
            try {
                Thread.sleep(delay/3);
            } catch (InterruptedException ex) {
                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
            }
//                }
//            }
        }
        fillCell(source_color,sourceX,sourceY);
        if(isFound)
        {
            fillCell(final_color,destX,destY);
        }
        else{
            JOptionPane.showMessageDialog(null, "Destination couldn't be reached");
        }

         
//        findShortestPath();   

        
    }
    
     private void astar()
    {
        replay();
        
        PriorityQueue<Pair<Integer,Pair<Integer,Integer>> > pQueue = new PriorityQueue<>(new SortByF());
        
        //sample priority que implementation    
//        pQueue.add(new Pair(2,new Pair(20,11)));
//        pQueue.add(new Pair(1,new Pair(18,20)));
//        pQueue.add(new Pair(1,new Pair(12,18)));
//        while(!pQueue.isEmpty())
//            System.out.println(""+pQueue.poll());

        System.err.println(""+board[sourceX+1][sourceY]);
        //actual code
        Pair source=new Pair(0,new Pair(sourceX,sourceY));
        pQueue.add(source);
        cost[sourceX][sourceY]=0;
        while(!pQueue.isEmpty()){
            Pair curPair=pQueue.poll();
            int f,g,h,curX,curY;
            Pair cur=(Pair) curPair.getValue();
            curX=(int) cur.getKey();
            curY=(int) cur.getValue();
            if(board[curX][curY]==1) continue;         
            visited[curX][curY]=1;
            g=cost[curX][curY];  
//            System.out.println(""+curX+" "+curY);
            if(isSource(curX, curY));
            else fillCell(temp_color,curX,curY);
            if(isDest(curX, curY)) {
                isFound=true;
                break;
            }
            if(board[curX][curY-1]!=1 )
            {
                if(cost[curX][curY-1]>g+1){
                f=g+1+findH(curX,curY-1);
                pQueue.add(new Pair(f,new Pair(curX,curY-1)));
                cost[curX][curY-1]=g+1;}
            }
            if(board[curX-1][curY]!=1 )
            {
                if(cost[curX-1][curY]>g+1){
                f=g+1+findH(curX-1,curY);
                pQueue.add(new Pair(f,new Pair(curX-1,curY)));
                cost[curX-1][curY]=g+1;}
            }
            if(board[curX+1][curY]!=1 )
            {
                if(cost[curX+1][curY]>g+1){
                f=g+1+findH(curX+1,curY);
                pQueue.add(new Pair(f,new Pair(curX+1,curY)));
                cost[curX+1][curY]=g+1;}
            }
            if(board[curX][curY+1]!=1)
            {
                if( cost[curX][curY+1]>g+1)
                {f=g+1+findH(curX,curY+1);
                pQueue.add(new Pair(f,new Pair(curX,curY+1)));
                cost[curX][curY+1]=g+1;}
            }
                try {
                    Thread.sleep(delay);
                } catch (InterruptedException ex) {
                     Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
                }   
        }
        fillCell(source_color,sourceX,sourceY);
        if(isFound)
        {
            fillCell(final_color,destX,destY);
                        path(cost[destX][destY]); 
        }
        else{
            JOptionPane.showMessageDialog(null, "Destination couldn't be reached");
        }
    }
     
     private void bfs()
    {
        replay();
        Queue<Pair<Integer,Integer> > que;
        que=new LinkedList<Pair<Integer,Integer> >();
        
        //sample que implementation
        
//        Pair p1=new Pair(10,20);
//        Pair p2=new Pair(10,21);
//        que.add(p1);
//        que.add(p2);
//        System.out.println(""+que.peek());
//        que.remove();
//        System.out.println(""+que.peek());


        //actual code
        que.add(new Pair(sourceX,sourceY));
        cost[sourceX][sourceY]=0;
//        visited[sourceX][sourceY]=1;
        int prevCost=0;
        System.out.println(""+destX+" "+sourceX);
        while(!que.isEmpty())
        {
            int curX=que.peek().getKey();
            int curY=que.peek().getValue();
            que.remove();
            if(board[curX][curY]==1 || visited[curX][curY]==1) continue;
            visited[curX][curY]=1;
            int curCost=cost[curX][curY];     
            if(curX==sourceX && curY==sourceY);
            else fillCell(temp_color,curX,curY);
            if(curX==destX && curY==destY) {
                isFound=true;
                break;
            }
            if(board[curX][curY-1]!=1 && visited[curX][curY-1]!=1)
            {
                que.add(new Pair(curX,curY-1));
                cost[curX][curY-1]=curCost+1;
            }
            if(board[curX-1][curY]!=1 && visited[curX-1][curY]!=1)
            {
                que.add(new Pair(curX-1,curY));
                cost[curX-1][curY]=curCost+1;
            }
            if(board[curX][curY+1]!=1 && visited[curX][curY+1]!=1)
            {
                que.add(new Pair(curX,curY+1)); 
                cost[curX][curY+1]=curCost+1;
            }
            if(board[curX+1][curY]!=1 && visited[curX+1][curY]!=1)
            {
                que.add(new Pair(curX+1,curY));
                cost[curX+1][curY]=curCost+1;
            }

            
            
//            for(int i=curX-1;i<=curX+1;i++)
//            {
//                if(i<0)
//                    continue;
//                for(int j=curY-1;j<=curY+1;j++)
//                {
//                    if(j<0)  continue;
//                    que.add(new Pair(i,j));
//            if(prevCost!=curCost)
//            {
            try {
                Thread.sleep(delay);
            } catch (InterruptedException ex) {
                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
            }
            prevCost=curCost;

//                }
//            }
        }
        fillCell(source_color,sourceX,sourceY);
        if(isFound)
        {
            fillCell(final_color,destX,destY);
//            path(cost[destX][destY]);
        }
        else{
            JOptionPane.showMessageDialog(null, "Destination couldn't be reached");
        }

    }
    
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed

//        for(int i=0;i<max_x;i++)
//        {
//            for(int j=0;j<max_y;j++)
//            {
//                visited[i][j]=0;
//                cost[i][j]=Integer.MAX_VALUE;
//            }
//        }
        replay();
        Queue<Pair<Integer,Integer> > que;
        que=new LinkedList<Pair<Integer,Integer> >();
        
        //sample que implementation
        
//        Pair p1=new Pair(10,20);
//        Pair p2=new Pair(10,21);
//        que.add(p1);
//        que.add(p2);
//        System.out.println(""+que.peek());
//        que.remove();
//        System.out.println(""+que.peek());


        //actual code
        que.add(new Pair(sourceX,sourceY));
        cost[sourceX][sourceY]=0;
//        visited[sourceX][sourceY]=1;
        System.out.println(""+destX+" "+sourceX);
        while(!que.isEmpty())
        {
            int curX=que.peek().getKey();
            int curY=que.peek().getValue();
            que.remove();
            if(board[curX][curY]==1 || visited[curX][curY]==1) continue;
            visited[curX][curY]=1;
            int curCost=cost[curX][curY];     
            if(curX==sourceX && curY==sourceY);
            else fillCell(temp_color,curX,curY);
            if(curX==destX && curY==destY) {
                isFound=true;
                break;
            }
            if(board[curX][curY-1]!=1 && visited[curX][curY-1]!=1)
            {
                que.add(new Pair(curX,curY-1));
                cost[curX][curY-1]=curCost+1;
            }
            if(board[curX-1][curY]!=1 && visited[curX-1][curY]!=1)
            {
                que.add(new Pair(curX-1,curY));
                cost[curX-1][curY]=curCost+1;
            }
            if(board[curX+1][curY]!=1 && visited[curX+1][curY]!=1)
            {
                que.add(new Pair(curX+1,curY));
                cost[curX+1][curY]=curCost+1;
            }
            if(board[curX][curY+1]!=1 && visited[curX][curY+1]!=1)
            {
                que.add(new Pair(curX,curY+1)); 
                cost[curX][curY+1]=curCost+1;
            }
            
            
//            for(int i=curX-1;i<=curX+1;i++)
//            {
//                if(i<0)
//                    continue;
//                for(int j=curY-1;j<=curY+1;j++)
//                {
//                    if(j<0)  continue;
//                    que.add(new Pair(i,j));
//            try {
//                Thread.sleep(delay);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
//                }
//            }
        }
        fillCell(source_color,sourceX,sourceY);
        if(isFound)
        {
            fillCell(final_color,destX,destY);
            fastpath(cost[destX][destY]);
//            repaint();
        }
        else{
            JOptionPane.showMessageDialog(null, "Destination couldn't be reached");
        }

           System.out.println(""+cost[sourceX][sourceY]);
         
//        findShortestPath();   

        

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    
   
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        int totalCount=max_x*max_y;
        int todo=totalCount*9/10;
        for(int i=0;i<totalCount;i++)
        {
//            for(int j=-0;j<max_y;j++){
            int rndX=(int)(Math.random()*1000)%max_x;
            int rndY=(int)(Math.random()*1000)%max_y;
//            int rndX=i,rndY=j;
            if(isSource(rndX, rndY) || isDest(rndX, rndY)) continue;
            if(board[rndX][rndY]!=0) continue;
            board[rndX][rndY]=1;
            fillCell(Color.BLACK,rndX,rndY);
//            }
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        int curx=sourceX,cury=sourceY;
        int px=0,py=0;
        LinkedList<Pair<Integer,Integer> > st=new LinkedList<>();
        st.push(new Pair(sourceX,sourceY));
        while (!st.isEmpty()) {
            Pair cur=st.pop();
            int i=(int) cur.getKey(),j=(int) cur.getValue();
            curx=i;cury=j;
            if(isDest(i, j)) break;
            System.err.println(""+i+" "+j);
            if(board[i][j]==1) continue;
            visited[i][j]=1;
            board[i][j]=-1;
            
            ArrayList<Integer> al=new ArrayList<>();
            al.add(0);al.add(1);al.add(2);al.add(3);
            
            while(!al.isEmpty())
            {
                int rnd=(int)(Math.random()*100)%(al.size());
                int pos=al.get((int)rnd);               
                switch(pos)
                {
                    case 0: if(visited[i][j-1]!=1) st.push(new Pair(i,j-1)); break;
                    case 1: if(visited[i-1][j]!=1) st.push(new Pair(i-1,j)); break;
                    case 2: if(visited[i+1][j]!=1) st.push(new Pair(i+1,j)); break;
                    case 3: if(visited[i][j+1]!=1) st.push(new Pair(i,j+1)); break;
                }
                al.remove((Integer)pos);
            }
            
        }
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                visited[i][j]=0;
            }
        }
//        while(!isDest(curx, cury))
//        {
//            px=curx;py=cury;
////            if(!(isDest(px, py) || isSource(px, py)))
////                fillCell(temp_color,curx,cury);
//            int rnd=(int)(Math.random()*100)%4;
//            switch(rnd)
//            {
//                case 0: cury--; break;
//                case 1: curx--; break;
//                case 2: curx++; break;
//                case 3: cury++; break;
//            }
//            if(board[curx][cury]==1)
//            {
//                curx=px;
//                cury=py;
//                continue;
//            }
//            else board[curx][cury]=-1;
//
//        }

            // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    
    
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        
        Main mn=new Main();
        this.dispose();
        mn.setVisible(true);

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed


            algoIndex=jComboBox1.getSelectedIndex();
            switch(algoIndex)
            {
                case 1 : dijisktra(); break;
                case 2 : astar(); break;
                case 3 : dfs(); break;
                case 4 : bfs(); break;
                default : JOptionPane.showMessageDialog(null," Please Select an Algorithm");
            }

            // TODO add your handling code here:
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    resetBoard();
    }//GEN-LAST:event_jButton5ActionPerformed

    
    private void replay()
    {
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                if(visited[i][j]==1 && board[i][j]!=1)
                    fillCell(background_color, i, j);
                visited[i][j]=0;
                cost[i][j]=Integer.MAX_VALUE;
                
            }
        }       
//        for(int i=0;i<max_x;i++)
//        {
//            for(int j=0;j<max_y;j++)
//            {
//                
////                cost[i][j]=0;
//            }
//        }
        fillCell(source_color,sourceX,sourceY);
        fillCell(dest_color,destX,destY);
        isFound=false;
    }
    
    private int findH(int x,int y)
    {
        return Math.abs(x-destX)+Math.abs(y-destY);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestForm().setVisible(true);
//                    new Grid().setVisible(true);
            }
        });
    }

    
    void path(int minCost)
    {
        int curx=destX,cury=destY;
        minCost--;
        int nextx=destX,nexty=destY;
        System.err.println(""+minCost+" "+cost[curx+1][cury]);
        while(minCost>0)
        {
            if(cost[curx][cury-1]==minCost && visited[curx][cury-1]==1)
            {
                nexty--;
            }
            else if(cost[curx-1][cury]==minCost && visited[curx-1][cury]==1) {
                nextx--;
            }
            else if(cost[curx+1][cury]==minCost && visited[curx+1][cury]==1) 
                nextx++;
            else nexty++;
            curx=nextx;cury=nexty;
            fillCell(path_color,curx,cury) ;
            minCost--;
            try {
                Thread.sleep(delay/3);
            } catch (InterruptedException ex) {
                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
     void fastpath(int minCost)
    {
        int curx=destX,cury=destY;
        minCost--;
        int nextx=destX,nexty=destY;
        System.err.println(""+minCost+" "+cost[curx+1][cury]);
        while(minCost>0)
        {
            if(cost[curx][cury-1]==minCost)
            {
                nexty--;
            }
            else if(cost[curx-1][cury]==minCost) {
                nextx--;
            }
            else if(cost[curx+1][cury]==minCost) 
                nextx++;
            else nexty++;
            curx=nextx;cury=nexty;
            fillCell(path_color,curx,cury) ;
            minCost--;
//            try {
//                Thread.sleep(delay/3);
//            } catch (InterruptedException ex) {
//                Logger.getLogger(TestForm.class.getName()).log(Level.SEVERE, null, ex);
//            }
        }
    }
    
    
    private boolean isSource(int x,int y)
    {
        if(x==sourceX && y==sourceY)
               return true;
        return false;
    }
    private boolean isDest(int x,int y)
    {
        if(x==destX && y==destY)
               return true;
        return false;
    }
     
    @Override
    public void mouseDragged(MouseEvent me) {

        int x=me.getX();
        int y=me.getY();
        x/=width; y/=width;
        if(x>=max_x || y>=max_y) return;
        Graphics g=getGraphics();
        
        if(srcChange)
        {
            fillCell(background_color,sourceX,sourceY);
            sourceX=x;sourceY=y;
            fillCell(source_color, sourceX, sourceY);     
            if(isFound){
                jButton3.doClick();
            }
        }
        else if(destChange)
        {
            fillCell(background_color,destX,destY);
            destX=x;destY=y;
            fillCell(dest_color, destX, destY);
            if(isFound){
                jButton3.doClick();
            }
        }
        else{
            if(isDest(x,y) || isSource(x,y)) return;
            board[x][y]=1;
            g.fillRect(x*width, y*width, width, width);
        }

    }

    @Override
    public void mouseMoved(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent me) {
    }

    private void fillCell(Color c,int x,int y)
    {
        Graphics g=getGraphics();
//       Graphics  g=graphics;

        g.setColor(c);
        g.fillRect(x*width+1, y*width+1, width-1, width-1);
    }
    
    public void resetBoard()
    {
        for(int i=0;i<max_x;i++)
        {
            for(int j=0;j<max_y;j++)
            {
                visited[i][j]=0;
                board[i][j]=0;
                cost[i][j]=Integer.MAX_VALUE;
            }
        }
        isFound=false;
        repaint();
    }
    
    

    
    @Override
    public void mousePressed(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        int x=me.getX();
        int y=me.getY();
        x/=width; y/=width;
        if(x>=max_x || y>=max_y) return;
        if(x==sourceX && y==sourceY)        
        {
            srcChange=true;
            destChange=false;
        }     
        else if(x==destX && y==destY)
        {
            destChange=true;
            srcChange=false;
        }
        else {
            srcChange=false;
            destChange=false;
        }
    }

    @Override
    public void mouseReleased(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent me) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
     
    class SortByF implements Comparator<Pair<Integer,Pair<Integer,Integer > > >
{

    @Override
    public int compare(Pair<Integer, Pair<Integer, Integer>> t, Pair<Integer, Pair<Integer, Integer>> t1) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        if(t.getKey()==t1.getKey())
        {
            Pair p1=t.getValue();
            Pair p2=t1.getValue();
            int h1,h2;
            h1 = Math.abs((int)p1.getKey()-destX)+Math.abs(destY-(int)p1.getValue());
            h2 = Math.abs((int)p2.getKey()-destX)+Math.abs(destY-(int)p2.getValue());
            return h1-h2;
        }
        return t.getKey()-t1.getKey();
    }
    
}
}

